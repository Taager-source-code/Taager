import { Inject, Service } from 'typedi';
import QuestionnaireRepo from '../contracts/QuestionnaireRepo';
import QuestionnaireAnswerRepo from '../contracts/QuestionnaireAnswerRepo';
import QuestionnaireRepoImpl from '../../infrastructure/repositories/QuestionnaireRepoImpl';
import QuestionnaireAnswerRepoImpl from '../../infrastructure/repositories/QuestionnaireAnswerRepoImpl';
import { Questionnaire } from '../models/Questionnaire';
import { QuestionnaireNotFoundError } from '../../../common/application/exceptions/QuestionnaireNotFoundError';
import { QuestionnaireNotAvailableError } from '../../../common/application/exceptions/QuestionnaireNotAvailableError';
import IsMultiTenancyEnabled from '../../../../../shared-kernel/application/usecases/IsMultiTenancyEnabled';

@Service({ global: true })
export default class GetQuestionnaire {
  private questionnaireRepo: QuestionnaireRepo;
  private questionnaireAnswerRepo: QuestionnaireAnswerRepo;
  private isMultiTenancyEnabled: IsMultiTenancyEnabled;

  constructor(
    @Inject(() => QuestionnaireRepoImpl) questionnaireRepo: QuestionnaireRepo,
    @Inject(() => QuestionnaireAnswerRepoImpl) questionnaireAnswerRepo: QuestionnaireAnswerRepo,
    isMultiTenancyEnabled: IsMultiTenancyEnabled,
  ) {
    this.questionnaireRepo = questionnaireRepo;
    this.questionnaireAnswerRepo = questionnaireAnswerRepo;
    this.isMultiTenancyEnabled = isMultiTenancyEnabled;
  }

  async execute(questionnaireName: string, taagerId: string): Promise<Questionnaire> {
    const questionnaire = await this.questionnaireRepo.findByName(questionnaireName);
    if (!questionnaire) {
      throw new QuestionnaireNotFoundError(questionnaireName);
    }

    if (
      (await this.isMultiTenancyEnabled.execute(taagerId)) ||
      (await this.isQuestionnaireAnswered(questionnaireName, taagerId))
    ) {
      throw new QuestionnaireNotAvailableError(questionnaireName, taagerId);
    }

    return questionnaire;
  }

  private async isQuestionnaireAnswered(questionnaireName: string, taagerId: string): Promise<boolean> {
    const questionnaireAnswer = await this.questionnaireAnswerRepo.findByQuestionnaireNameAndTaagerId(
      questionnaireName,
      taagerId,
    );
    return questionnaireAnswer !== undefined && questionnaireAnswer !== null;
  }
}


