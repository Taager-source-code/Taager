import http from 'http';
import app from './app';

import MigrationExecutor from './migrations/migrationExecutor';
import Logger from './logging/general.log';
import Env from './Env';
import { Container } from 'typedi';

import { connectToMongoDB, disconnectFromMongoDB } from './config/mongoose';
import * as featureToggles from './shared-kernel/infrastructure/toggles/featureToggles';
import PulsarBootstrap from './shared-kernel/infrastructure/pulsar/PulsarBootstrap';

const normalizePort = (val) => {
  const portNumber = Number(val);
  if (Number.isNaN(portNumber)) {
    return val;
  }
  if (portNumber >= 0) {
    return portNumber;
  }
  return false;
};

const port = normalizePort(Env.PORT || '4000');
app.set('port', port);

const server = http.createServer(app);

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  switch (error.code) {
    case 'EACCES':
      Logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      Logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      Logger.error(`general error while staring a server: ${error.stack}`);
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr?.port}`;
  Logger.info(`Listening on ${bind}`);
};

/**
 * Connect to database and listen on provided port, on all network interfaces.
 */
export const bootstrapServer = async () => {
  try {
    await connectToMongoDB();
  } catch (err) {
    Logger.error(`Error while connection to mongo: ${(err as Error).stack}`);
    throw err;
  }
  await featureToggles.connect();
  try {
    await new MigrationExecutor().migrateAll();
  } catch (err) {
    Logger.error(`Error happened while the migration stage: ${(err as Error).stack}`);
    throw err;
  }

  await Container.of().get(PulsarBootstrap).execute();

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
};

export const closeServer = async () => {
  await new Promise<void>((resolve, reject) => {
    server.close((err) => {
      if (err) {
        return reject(err);
      }
      resolve();
    });
  });
  await disconnectFromMongoDB();
};
